#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass article
\begin_preamble
\usepackage{tikz}
\usetikzlibrary{arrows}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 12
\spacing single
\use_hyperref false
\papersize a4paper
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 1.25cm
\topmargin 1.25cm
\rightmargin 1.25cm
\bottommargin 1.25cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
DSA Assignment 1:Well Formed Polygons
\end_layout

\begin_layout Author
Joe Kurian Eappen
\begin_inset Newline newline
\end_inset

EE13B080
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
Program was done in C++ with the use of the STL.
 Vectors were used to facilitate dynamically allocated structures ( such
 as number of sides in a Polygon, number of Polygons,etc.).
 This could have been done with preallocated memory spaces with the limiting
 cases in mind as well.
\end_layout

\begin_layout Subsection
Data Structures And Special Variables Used
\end_layout

\begin_layout Subsubsection
Constants
\end_layout

\begin_layout Enumerate
Constants used in the Adjacency Matrix : 
\begin_inset Newline newline
\end_inset

const int NOT_CHECKED=-2; const int NOT_CONNECTED=-1; 
\begin_inset Newline newline
\end_inset

const int INTERSECTING=1; const int ITSELF=0;
\end_layout

\begin_deeper
\begin_layout Enumerate
Defining the bounds of our coordinate space:
\begin_inset Newline newline
\end_inset

const int END_OF_X=32000; const int END_OF_Y=32000;
\end_layout

\begin_layout Enumerate
Maximum distance between any two polyons in the graph.
 Used in place of INF in the shortest path algo.
 
\begin_inset Newline newline
\end_inset

const float MAX_DIST=1000000;
\end_layout

\end_deeper
\begin_layout Subsubsection
Structures:
\end_layout

\begin_layout Enumerate
Point: To store X and Y coordinates of a point where both are non negative
 integers.
\end_layout

\begin_deeper
\begin_layout Enumerate
Side: Consisting of two Point Structures.
\end_layout

\begin_deeper
\begin_layout Enumerate
Preprocessing was done to store the left coordinate of a particular side
 in the first Point structure and the right coordinate in the second for
 all edges.
\end_layout

\end_deeper
\begin_layout Enumerate
CentroidPoint: To store the X and Y coordinates of the Centroid of a Polygon
 ( float used since it may have decimal values)
\end_layout

\begin_layout Enumerate
edge: To store the 'to' node and length of the edge in the AdjacencyList
 representation.
\end_layout

\end_deeper
\begin_layout Subsubsection
Classes
\end_layout

\begin_layout Enumerate
Polygon:
\end_layout

\begin_deeper
\begin_layout Enumerate
Members:
\end_layout

\begin_deeper
\begin_layout Enumerate
vectors x,y : to store the i-th coordinates in x[i] and y[i].
 In hndsight, a vector of the Point struct would have been a better choice
 but this was implemented later.
\end_layout

\begin_deeper
\begin_layout Enumerate
bool convexity : true if shape was convex, false if not (intended to implement
 faster algorithms for convex polygons but spent time on other aspects of
 the program)
\end_layout

\begin_layout Enumerate
Vector of Side struct
\end_layout

\begin_deeper
\begin_layout Enumerate
sides : Sides in the same order as inputed
\end_layout

\begin_layout Enumerate
sidesOrderedByX: Sides ordered in ascending order of the leftmost coordinate
\end_layout

\end_deeper
\begin_layout Enumerate
CentroidPoint cent : To store the centroid of the polygon
\end_layout

\begin_layout Enumerate
int xmax,xmin,ymax,ymin: To store the values needed to construct the bounding
 rectangle of the Polygon.
 
\end_layout

\end_deeper
\begin_layout Enumerate
Important Member Functions:
\end_layout

\begin_deeper
\begin_layout Enumerate
bool CheckIfAntiClockwise():
\end_layout

\begin_deeper
\begin_layout Enumerate
Checks if point given are in the anticlockwise order.
\end_layout

\begin_layout Enumerate
Uses the fact that the integral of the area is negative if going in the
 anticlockwise direction.
\end_layout

\end_deeper
\begin_layout Enumerate
bool CheckConvexity():
\end_layout

\begin_deeper
\begin_layout Enumerate
Check if polygon is convex using the fact that any 3 points in order should
 have clockwise orientation if the polygon is convex.
\end_layout

\end_deeper
\begin_layout Enumerate
int orientation(Point p, Point q, Point r):
\end_layout

\begin_deeper
\begin_layout Enumerate
Returns 0,1 or 2 depending on if p,q, and r are collinear, anticlockwise
 or clockwise (in our unusual coordinate system where -y axis is +y.)
\end_layout

\begin_layout Enumerate
Used the slopes of the line from Point p to q and q to r to make the decision.
\end_layout

\begin_layout Enumerate
Algo provided 
\begin_inset CommandInset href
LatexCommand href
name "here"
target "http://www.geeksforgeeks.org/orientation-3-ordered-points/"

\end_inset

.
\end_layout

\end_deeper
\begin_layout Enumerate
bool onSegment(Point p, Point q, Point r):
\end_layout

\begin_deeper
\begin_layout Enumerate
Returns true if Point q is on the line segment connecting p and r.
\end_layout

\end_deeper
\begin_layout Enumerate
bool doIntersect(Point p1, Point q1, Point p2, Point q2, bool DoingPointInPolyCh
eck=false):
\end_layout

\begin_deeper
\begin_layout Enumerate
if DoingPointInPolyCheck=false then Check if line p1q1 and p2q2 are intersecting
 excluding the case that one point lies on the other line (or is collinear)
\end_layout

\begin_layout Enumerate
else consider that case as well.
\end_layout

\begin_layout Enumerate
This was needed to include the condition that touching edges or a vertice
 on an edge was not considered to be intersecting ( which was a major reason
 for most hiccups in the code and a significant part of the problem statement.)
\end_layout

\end_deeper
\begin_layout Enumerate
bool CheckIfIntersecting():
\end_layout

\begin_deeper
\begin_layout Enumerate
To check if any of the edges of the polygon intersects with the other.
\end_layout

\begin_layout Enumerate
This was made before the idea of using an Edge structure or a vector of
 such structures came to mind and iterates through all points constructing
 edges as we move along.
\end_layout

\end_deeper
\begin_layout Enumerate
bool CheckPointInPolygon(Point p):
\end_layout

\begin_deeper
\begin_layout Enumerate
Checks if a given pont P is inside the polygon or not (includes edges).
\end_layout

\begin_layout Enumerate
First checks if Point is outside the bounding rectange of the polygon.
\end_layout

\begin_layout Enumerate
If it is inside, counts number of intersections of a line y=(x coordinate
 of P).
 If this is even then the point is outside, else it is inside.
\end_layout

\begin_layout Enumerate
If collinear then check if point lies on the collinear edge else don't count
 it.
\end_layout

\end_deeper
\begin_layout Enumerate
bool CheckPointStrictlyInPolygon(Point p):
\end_layout

\begin_deeper
\begin_layout Enumerate
Checks if a given pont P is strictly inside the polygon or not.
\end_layout

\end_deeper
\begin_layout Enumerate
Constructor function taking vector<int> x,vector<int> y:
\end_layout

\begin_deeper
\begin_layout Enumerate
Calculated bounding rectangle, centroid, convexity and populates sides and
 sidesOrderedByX.
\end_layout

\end_deeper
\end_deeper
\end_deeper
\begin_layout Enumerate
SetOfPolygons:
\end_layout

\begin_deeper
\begin_layout Enumerate
Members:
\end_layout

\begin_deeper
\begin_layout Enumerate
vector<Polygon> PolyList : a vector of the Polygons in the program
\end_layout

\begin_layout Enumerate
vector<float> distances: The distances to each polygon from the first one
 (if graph is connected).
\end_layout

\begin_layout Enumerate
vector< vector<int> > AdjacencyMatrix: Matrix used to check for intersections.
 -2 for not checked, -1 for infinity, 1 for Intersecting (see constants).
\end_layout

\begin_layout Enumerate
vector< vector<edge> > AdjacencyList : Adjacency List representation of
 th graph used in the shortest path algorithm.
\end_layout

\begin_layout Enumerate
int DisconnectedPoly, bool Disconnected :
\begin_inset Newline newline
\end_inset

In case the graph is disconnected, store the position of the disconnected
 polygon.
\end_layout

\end_deeper
\end_deeper
\end_deeper
\end_body
\end_document
